<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//***********************************************************
// Variables
//***********************************************************
clock total_time;                                            // universal clock for total simulated time

const int total_devices =101;                                 // the number of devices in the network
const int timeout = 10;                                      // the maximum amount of time to wait for a login response
const int LIMIT = 32000;                                     // the maximum value for counting before whe need to roll over the counter

typedef int[1, total_devices] bot_id_t;                      // possible values for bot ids (akin to ip addresses)
typedef int[1, total_devices-1] bot_ip_t;                    // possible IP addresses excluding the default bot IP (0)
typedef int[101, 162] credentials_t;                         // possible values for credentials (akin to username/password combination)
typedef int[0, LIMIT] int_t;

urgent broadcast chan setup; //New
urgent broadcast chan new_infected[total_devices]; //New
urgent broadcast chan command_new[total_devices]; //New
urgent broadcast chan activate_loader; //New
urgent broadcast chan activate_first;                        // a channel to activate the first bot
urgent broadcast chan report;                                // a channel to notfy the CnC that there is a new device to infect
urgent broadcast chan dictionary_attack[total_devices];      // a channel for each device representing the attempted login on that device
urgent broadcast chan login_success[total_devices];          // a channel for each device representing the a successful login response to the attacking bot
broadcast chan load_binary[total_devices];                   // a channel for each device representing the command to begin secondary infection

int[0, total_devices] current_number_bots = 0;               // the number of infected devices at any given time
bool in_botnet[total_devices];                               // the list of currently infected bot IDs (the index value is the device id and the value indicates if the device is in the botnet)

credentials_t credential_attempt[total_devices];             // a list to represent passing credentials from attacking bot to device under attack

bot_id_t victim_queue[total_devices];                        // a list of devices to be infected
int [0, total_devices] victim_queue_length = 0;              // the number of devices currently waiting to be infected

int scan_loops = 0;
int_t total_scans = 0;
int attempt_loops = 0;
int_t total_attempts = 0;

bot_id_t new_vict_id; //New
bot_id_t vict_id; //New

//***********************************************************
// Functions
//***********************************************************





/******** Start a new cycle for messages, scans, and attack attempts whenever they exceed a certain LIMIT *********/

// the total number of messages is:
//             2*((LIMIT*scan_loops)+total_scans + (LIMIT*attempt_loops)+total_attempts)

void NEW_SCAN(){
    if (total_scans&lt;LIMIT){
        total_scans++;
        return;
    } else {
        scan_loops++;                //one full cycle has been completed
        total_scans=1;               //start counting from 1 again after a full cycle of 25000 scans
        return;
    }
}

void NEW_ATTEMPT(){
    if (total_attempts&lt;LIMIT){
        total_attempts++;
        return;
    } else {
        attempt_loops++;             //one full cycle has been completed
        total_attempts=1;            //start counting from 1 again after a full cycle of 25000 attempts
        return;
    }
}

//***********************************************************
// Gantt Color Codes
//***********************************************************
const int Color_Blue = 2;
const int Color_LBlue = 18;
const int Color_Cyan = 9;

const int Color_Purple = 3;
const int Color_DPurple = 20;

const int Color_Green = 8;
const int Color_LGreen = 24;

const int Color_Red = 0;
const int Color_Pink = 12;

const int Color_Orange = 5;
const int Color_LOrange = 14;
const int Color_Yellow = 6;</declaration>
	<template>
		<name>Botmaster</name>
		<location id="id0" x="-110" y="8">
			<name x="-127" y="-26">Initial</name>
			<committed/>
		</location>
		<location id="id1" x="51" y="8">
			<name x="9" y="-26">Setup_Servers</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-51" y="-17">setup!</label>
		</transition>
	</template>
	<template>
		<name>CnC_Server</name>
		<location id="id2" x="-850" y="-1309">
			<name x="-860" y="-1343">Idle</name>
		</location>
		<location id="id3" x="-848" y="-1241">
			<name x="-865" y="-1232">Initial</name>
			<committed/>
		</location>
		<location id="id4" x="-679" y="-1241">
			<name x="-697" y="-1232">Active</name>
		</location>
		<location id="id5" x="-459" y="-1241">
			<name x="-501" y="-1232">New_Bot_Found</name>
			<committed/>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-646" y="-1334">command_new[vict_id]!</label>
			<nail x="-459" y="-1309"/>
			<nail x="-680" y="-1309"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-637" y="-1266">new_infected[vict_id]?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-841" y="-1292">setup?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-807" y="-1266">activate_first!</label>
		</transition>
	</template>
	<template>
		<name>Report_Server</name>
		<declaration>//***********************************************************
// Functions for queuing and dequeuing victims for the loader
//***********************************************************
void queue_victim(bot_id_t id) {
    victim_queue[victim_queue_length] := id;
    victim_queue_length++;
}

void ADD_RECORD(bot_id_t id){
    in_botnet[id] := true;
    current_number_bots += 1;
}</declaration>
		<location id="id6" x="-425" y="-25">
			<name x="-435" y="-59">Idle</name>
		</location>
		<location id="id7" x="-297" y="-25">
			<name x="-323" y="-59">Listening</name>
		</location>
		<location id="id8" x="-77" y="-25">
			<name x="-127" y="-59">Check_Credentials</name>
			<committed/>
		</location>
		<location id="id9" x="153" y="-25">
			<name x="93" y="-8">New_Victim_Found</name>
			<committed/>
		</location>
		<location id="id10" x="374" y="-25">
			<name x="315" y="-8">New_Victim_Queued</name>
			<committed/>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-8" y="-110">activate_loader!</label>
			<nail x="374" y="-85"/>
			<nail x="-297" y="-85"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="assignment" x="188" y="-25">queue_victim(new_vict_id)</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-255" y="8">in_botnet[new_vict_id]</label>
			<nail x="-77" y="8"/>
			<nail x="-297" y="8"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-34" y="-51">!in_botnet[new_vict_id]</label>
			<label kind="assignment" x="-51" y="-25">ADD_RECORD(new_vict_id)</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-212" y="-51">report?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-382" y="-51">setup?</label>
		</transition>
	</template>
	<template>
		<name>Loader</name>
		<declaration>clock loader_x;

//***********************************************************
// Functions for queuing and dequeuing victims for the loader
//***********************************************************

bot_id_t get_next_victim() {
    return victim_queue[--victim_queue_length];
}

bool victim_queue_empty(){
    return victim_queue_length == 0;
}</declaration>
		<location id="id11" x="-518" y="-59">
			<name x="-552" y="-93">Standby</name>
		</location>
		<location id="id12" x="-297" y="-59">
			<name x="-323" y="-93">Loading</name>
			<label kind="invariant" x="-340" y="-42">loader_x&lt;=20</label>
		</location>
		<location id="id13" x="-85" y="-59">
			<name x="-110" y="-93">Loaded</name>
			<committed/>
		</location>
		<location id="id14" x="110" y="-59">
			<name x="67" y="-93">Check_Queue</name>
			<urgent/>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-459" y="-85">activate_loader?</label>
			<label kind="assignment" x="-484" y="-59">vict_id:=get_next_victim(),
loader_x:=0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-153" y="-34">!victim_queue_empty()</label>
			<label kind="assignment" x="-161" y="-8">vict_id:=get_next_victim(),
loader_x:=0</label>
			<nail x="110" y="-8"/>
			<nail x="-297" y="-8"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="guard" x="-144" y="34">victim_queue_empty()</label>
			<nail x="144" y="-59"/>
			<nail x="144" y="59"/>
			<nail x="-518" y="59"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-59" y="-85">new_infected[vict_id]!</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-238" y="-102">loader_x&gt;=10</label>
			<label kind="synchronisation" x="-255" y="-85">load_binary[vict_id]!</label>
		</transition>
	</template>
	<template>
		<name>Bot_Default</name>
		<parameter>const int ip, const credentials_t credentials</parameter>
		<declaration>clock x1;
int[0, 10] attack_attempts;
bot_ip_t target_ip;
credentials_t target_cd;

void exploit_credential(credentials_t target_cd){
    attack_attempts += 1;
    credential_attempt[target_ip] = target_cd;
}</declaration>
		<location id="id15" x="535" y="25">
			<name x="476" y="42">Attack_Successful</name>
			<committed/>
		</location>
		<location id="id16" x="527" y="-119">
			<name x="484" y="-154">Victim_Found</name>
			<committed/>
		</location>
		<location id="id17" x="253" y="-119">
			<name x="194" y="-153">Telnet_Port_Scan</name>
			<label kind="invariant" x="204" y="-110">x1&lt;=1</label>
		</location>
		<location id="id18" x="51" y="-119">
			<name x="17" y="-153">Inactive</name>
		</location>
		<location id="id19" x="782" y="-119">
			<name x="731" y="-102">Attack_Attempted</name>
			<label kind="invariant" x="791" y="-85">x1&lt;=1</label>
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="365" y="0">report!</label>
			<label kind="assignment" x="374" y="25">x1:=0</label>
			<nail x="255" y="25"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="331" y="-51">attack_attempts&gt;=10</label>
			<label kind="assignment" x="365" y="-25">x1:=0</label>
			<nail x="493" y="-25"/>
			<nail x="297" y="-25"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="guard" x="638" y="-230">x1&gt;=0</label>
			<nail x="782" y="-204"/>
			<nail x="527" y="-204"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="select" x="348" y="-161">ip_sel:bot_ip_t</label>
			<label kind="guard" x="372" y="-144">x1&gt;=0</label>
			<label kind="assignment" x="323" y="-119">NEW_SCAN(),
target_ip:=ip_sel, x1:=0,
attack_attempts:=0</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="select" x="595" y="-178">cd_sel:credentials_t</label>
			<label kind="guard" x="595" y="-161">attack_attempts&lt;10</label>
			<label kind="synchronisation" x="568" y="-144">dictionary_attack[target_ip]!</label>
			<label kind="assignment" x="561" y="-119">NEW_ATTEMPT(),
target_cd:=cd_sel, x1:=0,
exploit_credential(target_cd)</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="603" y="-1">login_success[target_ip]?</label>
			<label kind="assignment" x="612" y="25">new_vict_id:=target_ip</label>
			<nail x="782" y="25"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="93" y="-144">activate_first?</label>
			<label kind="assignment" x="85" y="-119">in_botnet[0]:=true,
x1:=0</label>
		</transition>
	</template>
	<template>
		<name>Bot_t1</name>
		<parameter>const bot_id_t ip, const credentials_t credentials</parameter>
		<declaration>clock x2;
int[0, 10] attack_attempts;
bot_ip_t target_ip;
credentials_t target_cd;

bool credential_match(){
    return credentials == credential_attempt[ip];
}

void exploit_credential(credentials_t target_cd){
    attack_attempts += 1;
    credential_attempt[target_ip] = target_cd;
}</declaration>
		<location id="id20" x="-1564" y="-195">
			<name x="-1623" y="-178">Attack_Successful</name>
			<committed/>
		</location>
		<location id="id21" x="-1564" y="-340">
			<name x="-1607" y="-375">Victim_Found</name>
			<committed/>
		</location>
		<location id="id22" x="-1844" y="-425">
			<name x="-1878" y="-459">Connected</name>
		</location>
		<location id="id23" x="-2193" y="-340">
			<name x="-2227" y="-323">Vulnerable</name>
		</location>
		<location id="id24" x="-1844" y="-340">
			<name x="-1904" y="-374">Telnet_Port_Scan</name>
			<label kind="invariant" x="-1895" y="-331">x2&lt;=1</label>
		</location>
		<location id="id25" x="-1309" y="-340">
			<name x="-1360" y="-323">Attack_Attempted</name>
			<label kind="invariant" x="-1300" y="-306">x2&lt;=1</label>
		</location>
		<location id="id26" x="-2193" y="-425">
			<name x="-2244" y="-459">Login_Successful</name>
			<committed/>
		</location>
		<location id="id27" x="-2031" y="-340">
			<name x="-2057" y="-323">Infected</name>
		</location>
		<init ref="id22"/>
		<transition>
			<source ref="id27"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-2014" y="-365">command_new[vict_id]?</label>
			<label kind="assignment" x="-1963" y="-340">x2:=0</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-2184" y="-399">login_success[ip]!</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-1734" y="-221">report!</label>
			<label kind="assignment" x="-1725" y="-195">x2:=0</label>
			<nail x="-1844" y="-195"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id24"/>
			<label kind="guard" x="-1768" y="-272">attack_attempts&gt;=10</label>
			<label kind="assignment" x="-1734" y="-246">x2:=0</label>
			<nail x="-1606" y="-246"/>
			<nail x="-1802" y="-246"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id21"/>
			<label kind="guard" x="-1453" y="-451">x2&gt;=0</label>
			<nail x="-1309" y="-425"/>
			<nail x="-1564" y="-425"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id21"/>
			<label kind="select" x="-1751" y="-382">ip_sel:bot_ip_t</label>
			<label kind="guard" x="-1725" y="-365">x2&gt;=0</label>
			<label kind="assignment" x="-1768" y="-340">NEW_SCAN(),
target_ip:=ip_sel, x2:=0,
attack_attempts:=0</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id25"/>
			<label kind="select" x="-1496" y="-399">cd_sel:credentials_t</label>
			<label kind="guard" x="-1496" y="-382">attack_attempts&lt;10</label>
			<label kind="synchronisation" x="-1521" y="-365">dictionary_attack[target_ip]!</label>
			<label kind="assignment" x="-1496" y="-340">NEW_ATTEMPT(),
target_cd:=cd_sel,
x2:=0,
exploit_credential(target_cd)</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-1496" y="-220">login_success[target_ip]?</label>
			<label kind="assignment" x="-1487" y="-195">new_vict_id:=target_ip</label>
			<nail x="-1309" y="-195"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id26"/>
			<label kind="guard" x="-2091" y="-468">credential_match()</label>
			<label kind="synchronisation" x="-2091" y="-451">dictionary_attack[ip]?</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="-2158" y="-366">load_binary[ip]?</label>
		</transition>
	</template>
	<template>
		<name>Bot_t2</name>
		<parameter>const bot_id_t ip, const credentials_t credentials, const int reboot_length, const int_t reboot_period, const int period_overflows, int_t reboot_time, int time_overflows</parameter>
		<declaration>clock x2, x_reboot;
int[0, 10] attack_attempts;
bot_ip_t target_ip;
credentials_t target_cd;

bool credential_match(){
    return credentials == credential_attempt[ip];
}

void exploit_credential(credentials_t target_cd){
    attack_attempts += 1;
    credential_attempt[target_ip] = target_cd;
}

void reboot(){
    x2:=0;
    in_botnet[ip] := false;
    reboot_time:=reboot_period;
    time_overflows:=period_overflows;
}</declaration>
		<location id="id28" x="-1530" y="-153">
			<name x="-1589" y="-136">Attack_Successful</name>
			<committed/>
		</location>
		<location id="id29" x="-1530" y="-306">
			<name x="-1573" y="-341">Victim_Found</name>
			<committed/>
		</location>
		<location id="id30" x="-2201" y="-501">
			<name x="-2235" y="-544">Connected</name>
			<label kind="invariant" x="-2261" y="-493">x_reboot&lt;=reboot_time
+LIMIT*time_overflows</label>
		</location>
		<location id="id31" x="-2201" y="-306">
			<name x="-2235" y="-340">Vulnerable</name>
			<label kind="invariant" x="-2244" y="-297">x_reboot&lt;=reboot_time
+LIMIT*time_overflows</label>
		</location>
		<location id="id32" x="-1810" y="-306">
			<name x="-1869" y="-340">Telnet_Port_Scan</name>
			<label kind="invariant" x="-1878" y="-297">x2&lt;=1 &amp;&amp;
x_reboot&lt;=reboot_time
+LIMIT*time_overflows</label>
		</location>
		<location id="id33" x="-1275" y="-306">
			<name x="-1309" y="-289">Attack_Attempted</name>
			<label kind="invariant" x="-1266" y="-272">x2&lt;=1 &amp;&amp;
x_reboot&lt;=reboot_time
+LIMIT*time_overflows</label>
		</location>
		<location id="id34" x="-2201" y="-399">
			<name x="-2252" y="-382">Login_Successful</name>
			<committed/>
		</location>
		<location id="id35" x="-1810" y="-501">
			<name x="-1836" y="-535">Rebooting</name>
			<label kind="invariant" x="-1861" y="-493">x2&lt;=reboot_length</label>
		</location>
		<location id="id36" x="-2006" y="-306">
			<name x="-2031" y="-340">Infected</name>
			<label kind="invariant" x="-2074" y="-297">x_reboot&lt;=reboot_time
+LIMIT*time_overflows</label>
		</location>
		<init ref="id30"/>
		<transition>
			<source ref="id31"/>
			<target ref="id35"/>
			<label kind="guard" x="-2184" y="-238">x_reboot &gt;= reboot_time+
LIMIT*time_overflows</label>
			<label kind="assignment" x="-2183" y="-195">reboot(),
current_number_bots--</label>
			<nail x="-2201" y="-195"/>
			<nail x="-1921" y="-195"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="-2031" y="-459">x_reboot &gt;= reboot_time+
LIMIT*time_overflows</label>
			<label kind="assignment" x="-2031" y="-425">reboot(),
current_number_bots--</label>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-1980" y="-331">command_new[vict_id]?</label>
			<label kind="assignment" x="-1929" y="-306">x2:=0</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id35"/>
			<label kind="guard" x="-1555" y="-527">x_reboot &gt;= reboot_time+LIMIT*time_overflows</label>
			<label kind="assignment" x="-1419" y="-501">reboot(),
current_number_bots--</label>
			<nail x="-1249" y="-306"/>
			<nail x="-1249" y="-501"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id35"/>
			<label kind="guard" x="-1802" y="-416">x_reboot &gt;= reboot_time+LIMIT*time_overflows</label>
			<label kind="assignment" x="-1802" y="-399">reboot(),
current_number_bots--</label>
			<nail x="-1810" y="-442"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id35"/>
			<label kind="guard" x="-2150" y="-527">x_reboot &gt;= reboot_time+LIMIT*time_overflows</label>
			<label kind="assignment" x="-2023" y="-501">reboot()</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id30"/>
			<label kind="guard" x="-2057" y="-586">x2&gt;=reboot_length</label>
			<label kind="assignment" x="-2040" y="-561">x_reboot:=0</label>
			<nail x="-1810" y="-561"/>
			<nail x="-2201" y="-561"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-2193" y="-365">login_success[ip]!</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-1700" y="-178">report!</label>
			<label kind="assignment" x="-1700" y="-153">x2:=0</label>
			<nail x="-1810" y="-153"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id32"/>
			<label kind="guard" x="-1734" y="-238">attack_attempts&gt;=10</label>
			<label kind="assignment" x="-1700" y="-204">x2:=0</label>
			<nail x="-1572" y="-212"/>
			<nail x="-1768" y="-212"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id29"/>
			<label kind="guard" x="-1419" y="-408">x2&gt;=0</label>
			<nail x="-1275" y="-382"/>
			<nail x="-1530" y="-382"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id29"/>
			<label kind="select" x="-1717" y="-348">ip_sel:bot_ip_t</label>
			<label kind="guard" x="-1691" y="-331">x2&gt;=0</label>
			<label kind="assignment" x="-1725" y="-306">NEW_SCAN(),
target_ip:=ip_sel, x2:=0,
attack_attempts:=0</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id33"/>
			<label kind="select" x="-1462" y="-365">cd_sel:credentials_t</label>
			<label kind="guard" x="-1462" y="-348">attack_attempts&lt;10</label>
			<label kind="synchronisation" x="-1487" y="-331">dictionary_attack[target_ip]!</label>
			<label kind="assignment" x="-1487" y="-306">NEW_ATTEMPT(),
target_cd:=cd_sel, x2:=0,
exploit_credential(target_cd)</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="-1462" y="-178">login_success[target_ip]?</label>
			<label kind="assignment" x="-1453" y="-153">new_vict_id:=target_ip</label>
			<nail x="-1275" y="-153"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id34"/>
			<label kind="guard" x="-2193" y="-450">credential_match()</label>
			<label kind="synchronisation" x="-2193" y="-433">dictionary_attack[ip]?</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-2150" y="-331">load_binary[ip]?</label>
		</transition>
	</template>
	<system>BM=Botmaster();
CNC=CnC_Server();
RPT=Report_Server();
LDR=Loader();
BOT_DF=Bot_Default(0,110);
BOT1 = Bot_t2(1,136,120,7200,0,3215,0);
BOT2 = Bot_t2(2,115,120,7200,0,5143,0);
BOT3 = Bot_t2(3,113,120,7200,0,1659,0);
BOT4 = Bot_t2(4,156,120,7200,0,776,0);
BOT5 = Bot_t2(5,116,120,7200,0,1710,0);
BOT6 = Bot_t2(6,129,120,7200,0,3306,0);
BOT7 = Bot_t2(7,144,120,7200,0,3224,0);
BOT8 = Bot_t2(8,107,120,7200,0,128,0);
BOT9 = Bot_t2(9,143,120,7200,0,1364,0);
BOT10 = Bot_t2(10,153,120,7200,0,3113,0);
BOT11 = Bot_t2(11,142,120,7200,0,6450,0);
BOT12 = Bot_t2(12,159,120,7200,0,3925,0);
BOT13 = Bot_t2(13,125,120,7200,0,2677,0);
BOT14 = Bot_t2(14,115,120,7200,0,1468,0);
BOT15 = Bot_t2(15,105,120,7200,0,395,0);
BOT16 = Bot_t2(16,147,120,7200,0,2522,0);
BOT17 = Bot_t2(17,120,120,7200,0,2400,0);
BOT18 = Bot_t2(18,120,120,7200,0,7053,0);
BOT19 = Bot_t2(19,114,120,7200,0,3660,0);
BOT20 = Bot_t2(20,104,120,7200,0,1348,0);
BOT21 = Bot_t2(21,141,120,7200,0,3509,0);
BOT22 = Bot_t2(22,104,120,7200,0,4126,0);
BOT23 = Bot_t2(23,131,120,7200,0,4923,0);
BOT24 = Bot_t2(24,151,120,7200,0,2369,0);
BOT25 = Bot_t2(25,123,120,7200,0,6610,0);
BOT26 = Bot_t2(26,125,120,7200,0,6544,0);
BOT27 = Bot_t2(27,135,120,7200,0,1022,0);
BOT28 = Bot_t2(28,154,120,7200,0,986,0);
BOT29 = Bot_t2(29,148,120,7200,0,2377,0);
BOT30 = Bot_t2(30,118,120,7200,0,2028,0);
BOT31 = Bot_t2(31,120,120,7200,0,5927,0);
BOT32 = Bot_t2(32,113,120,7200,0,5343,0);
BOT33 = Bot_t2(33,151,120,7200,0,5758,0);
BOT34 = Bot_t2(34,127,120,7200,0,6376,0);
BOT35 = Bot_t2(35,132,120,7200,0,110,0);
BOT36 = Bot_t2(36,108,120,7200,0,5817,0);
BOT37 = Bot_t2(37,122,120,7200,0,2424,0);
BOT38 = Bot_t2(38,106,120,7200,0,1552,0);
BOT39 = Bot_t2(39,121,120,7200,0,1927,0);
BOT40 = Bot_t2(40,144,120,7200,0,1521,0);
BOT41 = Bot_t2(41,158,120,7200,0,885,0);
BOT42 = Bot_t2(42,139,120,7200,0,6993,0);
BOT43 = Bot_t2(43,140,120,7200,0,1796,0);
BOT44 = Bot_t2(44,121,120,7200,0,2152,0);
BOT45 = Bot_t2(45,109,120,7200,0,4710,0);
BOT46 = Bot_t2(46,132,120,7200,0,1340,0);
BOT47 = Bot_t2(47,154,120,7200,0,5389,0);
BOT48 = Bot_t2(48,133,120,7200,0,3279,0);
BOT49 = Bot_t2(49,161,120,7200,0,4202,0);
BOT50 = Bot_t2(50,146,120,7200,0,5401,0);
BOT51 = Bot_t2(51,111,120,7200,0,6948,0);
BOT52 = Bot_t2(52,141,120,7200,0,6395,0);
BOT53 = Bot_t2(53,148,120,7200,0,735,0);
BOT54 = Bot_t2(54,158,120,7200,0,6676,0);
BOT55 = Bot_t2(55,114,120,7200,0,5379,0);
BOT56 = Bot_t2(56,139,120,7200,0,2780,0);
BOT57 = Bot_t2(57,136,120,7200,0,919,0);
BOT58 = Bot_t2(58,119,120,7200,0,4454,0);
BOT59 = Bot_t2(59,159,120,7200,0,6078,0);
BOT60 = Bot_t2(60,128,120,7200,0,2659,0);
BOT61 = Bot_t2(61,157,120,7200,0,519,0);
BOT62 = Bot_t2(62,106,120,7200,0,740,0);
BOT63 = Bot_t2(63,152,120,7200,0,1678,0);
BOT64 = Bot_t2(64,101,120,7200,0,3422,0);
BOT65 = Bot_t2(65,103,120,7200,0,6532,0);
BOT66 = Bot_t2(66,139,120,7200,0,1278,0);
BOT67 = Bot_t2(67,132,120,7200,0,49,0);
BOT68 = Bot_t2(68,109,120,7200,0,4138,0);
BOT69 = Bot_t2(69,146,120,7200,0,900,0);
BOT70 = Bot_t2(70,121,120,7200,0,5,0);
BOT71 = Bot_t2(71,111,120,7200,0,4211,0);
BOT72 = Bot_t2(72,103,120,7200,0,2840,0);
BOT73 = Bot_t2(73,134,120,7200,0,4775,0);
BOT74 = Bot_t2(74,104,120,7200,0,4061,0);
BOT75 = Bot_t2(75,153,120,7200,0,333,0);
BOT76 = Bot_t2(76,128,120,7200,0,4247,0);
BOT77 = Bot_t2(77,122,120,7200,0,5645,0);
BOT78 = Bot_t2(78,139,120,7200,0,2786,0);
BOT79 = Bot_t2(79,108,120,7200,0,6491,0);
BOT80 = Bot_t2(80,126,120,7200,0,3859,0);
BOT81 = Bot_t2(81,142,120,7200,0,4909,0);
BOT82 = Bot_t2(82,151,120,7200,0,3985,0);
BOT83 = Bot_t2(83,150,120,7200,0,5981,0);
BOT84 = Bot_t2(84,102,120,7200,0,7078,0);
BOT85 = Bot_t2(85,101,120,7200,0,7151,0);
BOT86 = Bot_t2(86,145,120,7200,0,3521,0);
BOT87 = Bot_t2(87,152,120,7200,0,405,0);
BOT88 = Bot_t2(88,117,120,7200,0,3831,0);
BOT89 = Bot_t2(89,103,120,7200,0,5390,0);
BOT90 = Bot_t2(90,120,120,7200,0,2998,0);
BOT91 = Bot_t2(91,143,120,7200,0,3389,0);
BOT92 = Bot_t2(92,153,120,7200,0,5508,0);
BOT93 = Bot_t2(93,143,120,7200,0,2354,0);
BOT94 = Bot_t2(94,102,120,7200,0,1943,0);
BOT95 = Bot_t2(95,119,120,7200,0,3731,0);
BOT96 = Bot_t2(96,150,120,7200,0,1478,0);
BOT97 = Bot_t2(97,129,120,7200,0,3252,0);
BOT98 = Bot_t2(98,118,120,7200,0,5137,0);
BOT99 = Bot_t2(99,123,120,7200,0,948,0);
BOT100 = Bot_t2(100,150,120,7200,0,3359,0);
system CNC, BM, RPT, LDR, BOT_DF, BOT1, BOT2, BOT3, BOT4, BOT5, BOT6, BOT7, BOT8, BOT9, BOT10, BOT11, BOT12, BOT13, BOT14, BOT15, BOT16, BOT17, BOT18, BOT19, BOT20, BOT21, BOT22, BOT23, BOT24, BOT25, BOT26, BOT27, BOT28, BOT29, BOT30, BOT31, BOT32, BOT33, BOT34, BOT35, BOT36, BOT37, BOT38, BOT39, BOT40, BOT41, BOT42, BOT43, BOT44, BOT45, BOT46, BOT47, BOT48, BOT49, BOT50, BOT51, BOT52, BOT53, BOT54, BOT55, BOT56, BOT57, BOT58, BOT59, BOT60, BOT61, BOT62, BOT63, BOT64, BOT65, BOT66, BOT67, BOT68, BOT69, BOT70, BOT71, BOT72, BOT73, BOT74, BOT75, BOT76, BOT77, BOT78, BOT79, BOT80, BOT81, BOT82, BOT83, BOT84, BOT85, BOT86, BOT87, BOT88, BOT89, BOT90, BOT91, BOT92, BOT93, BOT94, BOT95, BOT96, BOT97, BOT98, BOT99, BOT100;
</system>
	<queries>
		<query>
			<formula>A[] total_time==50 imply current_number_bots+==total_devices-1</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; current_number_bots==total_devices-1</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; total_time == 5
</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=500] (&lt;&gt;current_number_bots==5)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=50] (&lt;&gt;current_number_bots==5)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;current_number_bots==5)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate[&lt;=500; 15] {BOT_DF.Telnet_Port_Scan, BOT_DF.Victim_Found}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate[&lt;=50] {in_botnet[1]}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;in_botnet[1])</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;in_botnet[1] &amp;&amp; in_botnet[2])</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;in_botnet[1] &amp;&amp; in_botnet[2] &amp;&amp; in_botnet[3])</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;current_number_bots==1)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;current_number_bots==2)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;current_number_bots==3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=25; 500] (&lt;&gt;current_number_bots==4)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;current_number_bots==5)</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>&lt;----- MODEL VERIFICATION -----&gt;</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] !deadlock</formula>
			<comment>Deadlocks never occur</comment>
		</query>
		<query>
			<formula>A[] deadlock imply current_number_bots==total_devices-1</formula>
			<comment>A deadlock implies that all devices have been infected</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>&lt;----- INFECTION REACHABILITY -----&gt;</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; current_number_bots==total_devices-1</formula>
			<comment>All devices will always be infected in every possible scenario</comment>
		</query>
		<query>
			<formula>E&lt;&gt; current_number_bots==total_devices-1</formula>
			<comment>It is possible for every device to eventually be infected</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>&lt;----- INFECTION TIMES -----&gt;</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] total_time==50 imply current_number_bots==total_devices-1</formula>
			<comment>All devices are always infected by 50 time units</comment>
		</query>
		<query>
			<formula>Pr[total_time&lt;=100; 100] (&lt;&gt;current_number_bots==total_devices-1)</formula>
			<comment>The probability all devices are compromised in 100 time units</comment>
		</query>
		<query>
			<formula>Pr[total_time&lt;=50] (&lt;&gt;current_number_bots==total_devices-1)</formula>
			<comment>The probability all devices are compromised in 50 time units</comment>
		</query>
		<query>
			<formula>Pr[total_time&lt;=25] (&lt;&gt;current_number_bots==total_devices-1)</formula>
			<comment>The probability all devices are compromised in 25 time units</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=10; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 10 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=20; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 20 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=25; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 25 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=30; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 30 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=40; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 40 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=50; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 50 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=60; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 60 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=70; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 70 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=80; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 80 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=90; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 90 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>E [total_time&lt;=100; 100] (max: current_number_bots)</formula>
			<comment>The expected number of compromised devices in 100 time units (generated with 100 simulation runs)</comment>
		</query>
		<query>
			<formula>Pr[&lt;=50] (&lt;&gt;in_botnet[1])</formula>
			<comment>The probability bot 1 has been infected by 50 time units</comment>
		</query>
		<query>
			<formula>Pr[&lt;=50] (&lt;&gt;in_botnet[2])</formula>
			<comment>The probability bot 2 has been infected by 50 time units</comment>
		</query>
		<query>
			<formula>Pr[&lt;=50] (&lt;&gt;in_botnet[3])</formula>
			<comment>The probability bot 3 has been infected by 50 time units</comment>
		</query>
		<query>
			<formula>Pr[&lt;=50] (&lt;&gt;in_botnet[4])</formula>
			<comment>The probability bot 4 has been infected by 50 time units</comment>
		</query>
		<query>
			<formula>Pr[&lt;=50] (&lt;&gt;in_botnet[5])</formula>
			<comment>The probability bot 5 has been infected by 50 time units</comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;in_botnet[1])</formula>
			<comment>The probability bot 1 has been infected by 25 time units</comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;in_botnet[1] &amp;&amp; in_botnet[2])</formula>
			<comment>The probability bots 1 and 2 have been infected by 25 time units</comment>
		</query>
		<query>
			<formula>Pr[&lt;=25] (&lt;&gt;in_botnet[1] &amp;&amp; in_botnet[2] &amp;&amp; in_botnet[3])</formula>
			<comment>The probability bots 1, 2 , and 3 have been infected by 25 time units</comment>
		</query>
		<query>
			<formula>Pr[&lt;=1000] (&lt;&gt;current_number_bots == 5)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate [total_time&lt;=1000; 1] {current_number_bots}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate [total_time&lt;=2000; 1] {current_number_bots}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate [total_time&lt;=10000; 1] {current_number_bots}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate [total_time&lt;=50000; 1] {current_number_bots}</formula>
			<comment>simulate 100 runs for 100 time units each and plot the number of infected bots against simulation time</comment>
		</query>
		<query>
			<formula>simulate [total_time&lt;=100; 100] {in_botnet[1], in_botnet[2], in_botnet[3], in_botnet[4], in_botnet[5]}</formula>
			<comment>simulate 100 runs for 100 time units each and plot when each bot becomes infected</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>&lt;----- Network Traffic -----&gt;</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=32] (&lt;&gt; total_messages&gt;75)</formula>
			<comment>Probability that at least 75 messages are sent over the network in 32 time units (which is the expected time the infect all 5 devices)</comment>
		</query>
		<query>
			<formula>simulate [total_time&lt;=100; 100] {total_scans, total_attempts} : current_number_bots==total_devices-1</formula>
			<comment>Simulate 100 runs for either 100 time units, or until every bot is infected, and plot the number of network scans and login attempts</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate [total_time&lt;=5000; 1] {BOT9.Rebooting}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate [total_time&lt;=5000; 5] {current_number_bots} : current_number_bots==total_devices-1</formula>
			<comment></comment>
		</query>
		<query>
			<formula>BOT1.Vulnerable --&gt; BOT1.Telnet_Port_Scan</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
